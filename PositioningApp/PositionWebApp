#!/usr/bin/env python

import time
import sys
import rospy # pylint: disable=import-error
from flask import (Flask, request, session, g, redirect, url_for, abort, render_template, flash, Response, jsonify) # pylint: disable=import-error
from frystation.srv import SetJointPose # pylint: disable=import-error
from frystation.srv import GetJointPose # pylint: disable=import-error
from std_msgs.msg import String # pylint: disable=import-error
from std_msgs.msg import Int32 # pylint: disable=import-error
from frystation.msg import SyncWriteItem # pylint: disable=import-error

app = Flask(__name__)

def get_joint_pose():
  #determine the current joint positions
  rospy.wait_for_service('/robotis/base/get_joint_pose')
  try:
    move_joint = rospy.ServiceProxy('/robotis/base/get_joint_pose', GetJointPose)
    responseJointPose = move_joint(["joint1", "joint2", "joint3","joint4","joint5","joint6"])
  except:
    print("Service call failed")
    exit(-1)
  return(responseJointPose)

@app.route('/')
def index():
    jointPose = get_joint_pose()
    return render_template('index.html', jointPose=jointPose)

@app.route('/setJointAngles', methods=['POST'])
def setJointAngles():
  rospy.wait_for_service('/manipulator_set_joint_values')
  try:
    updatedJointPose = request.get_json()
    srv = SetJointPose()
    srv.joint_name = ["joint1", "joint2", "joint3", "joint4", "joint5", "joint6"]
    srv.joint_value = [updatedJointPose['joint1'], updatedJointPose['joint2'], updatedJointPose['joint3'], updatedJointPose['joint4'], updatedJointPose['joint5'], updatedJointPose['joint6']]
    manipulator_set_joint_values = rospy.ServiceProxy('manipulator_set_joint_values', SetJointPose)
    myRequest = manipulator_set_joint_values(srv)
    return "joint position update successful"
  except:
    print("Service call failed")
    exit(-1)
  return(myRequest)

if __name__ == '__main__':
    		 
  app.run(host='0.0.0.0', debug=True) #host is required to allow this to be served to an external computer



