#!/usr/bin/env python

import time
import sys
import threading
import rospy # pylint: disable=import-error
from flask import (Flask, request, session, g, redirect, url_for, abort, render_template, flash, Response, jsonify) # pylint: disable=import-error
from frystation.srv import GetJointPose # pylint: disable=import-error
from std_msgs.msg import String # pylint: disable=import-error
from std_msgs.msg import Int32 # pylint: disable=import-error
from frystation.msg import JointPose # pylint: disable=import-error
from frystation.msg import SyncWriteItem # pylint: disable=import-error
from robotis_controller_msgs.msg import StatusMsg # pylint: disable=import-error

app = Flask(__name__)

def manipulator_status_callback(data):
    global MANIPULATOR_MOVING
    if data.status_msg == "End Trajectory":
      MANIPULATOR_MOVING = False	

def manipulator_move(joints):
    global MANIPULATOR_MOVING
    MANIPULATOR_MOVING = True
    msg = JointPose()
    msg.name = ["joint1", "joint2", "joint3", "joint4", "joint5", "joint6"]
    msg.value = [joints['joint1'], joints['joint2'], joints['joint3'], joints['joint4'], joints['joint5'], joints['joint6']]
    pubManipulator.publish(msg)
    mustend = time.time() + 10
    while time.time() < mustend:
      if not MANIPULATOR_MOVING: break
      time.sleep(.1)

def get_joint_pose():
      #determine the current joint positions
  rospy.wait_for_service('/robotis/base/get_joint_pose')
  try:
    move_joint = rospy.ServiceProxy('/robotis/base/get_joint_pose', GetJointPose)
    responseJointPose = move_joint(["joint1", "joint2", "joint3","joint4","joint5","joint6"])
  except:
    print("Service call failed")
    exit(-1)
  return(responseJointPose)

@app.route('/')
def index():
    jointPose = get_joint_pose()
    return render_template('index.html', jointPose=jointPose)

@app.route('/setJointAngles', methods=['POST'])
def setJointAngles():
    print('setting joint angles..')
    req = request.get_json()
    manipulator_move(req)
    return 'Joint updates completed successfully', 200

if __name__ == '__main__':
    		
  MANIPULATOR_MOVING = False
  
  #create the ROS node for the application
  threading.Thread(target=lambda: rospy.init_node('frystation_PositionWebApp', disable_signals=True)).start()	

  #setup publisher to send manipulator joint commands
  #pubManipulator = rospy.Publisher('/robotis/base/joint_pose_msg',JointPose, queue_size=1)

  #setup a subscriber to recieve notifications about manipulator status, allow 2 seconds for subscriber to register
  #rospy.Subscriber("/robotis/status", StatusMsg, manipulator_status_callback)
  
  app.run(host='0.0.0.0', debug=True) #host is required to allow this to be served to an external computer



