#!/usr/bin/env python

import time
import sys
import rospy # pylint: disable=import-error
from flask import (Flask, request, session, g, redirect, url_for, abort, render_template, flash, Response, jsonify) # pylint: disable=import-error
from frystation.srv import SetJointPose, SetJointPoseResponse # pylint: disable=import-error
from frystation.srv import SetJointPoseTest, SetJointPoseTestResponse # pylint: disable=import-error
from frystation.srv import GetJointPose # pylint: disable=import-error
from std_msgs.msg import String # pylint: disable=import-error
from std_msgs.msg import Int32 # pylint: disable=import-error
from sensor_msgs.msg import JointState # pylint: disable=import-error
from frystation.msg import SyncWriteItem # pylint: disable=import-error
from open_manipulator_msgs.srv import SetJointPosition # pylint: disable=import-error

app = Flask(__name__)

#determine the current joint positions
def get_joint_pose():
  rospy.wait_for_service('/get_joint_values')
  try:
    get_position = rospy.ServiceProxy('/get_joint_values', GetJointPose)
    request = GetJointPose()
    request = ["joint1", "joint2", "joint3","joint4","joint5","joint6"]
    responseGetJointPose = get_position(request)
    responseGetJointPose.joint_name = ["joint1", "joint2", "joint3","joint4","joint5","joint6"]
    responseGetJointPose.joint_value = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
  except (rospy.ServiceException, rospy.ROSException) as e: 
    rospy.logerr("Service call failed: %s" % (e,))
    exit(-1)
  return(responseGetJointPose)

@app.route('/')
def index():
    jointPose = get_joint_pose()
    print (jointPose.joint_value)
    return render_template('sliderJointControl.html', jointPose=jointPose)

@app.route('/setJointAngles', methods=['POST'])
def setJointAngles():
  rospy.wait_for_service('/open_manipulator_pro/goal_joint_space_path')
  try:
    updatedJointPose = request.get_json()
    srv = SetJointPosition()
    srv.request.joint_position.joint_name = ["joint1", "joint2", "joint3", "joint4", "joint5", "joint6"]
    srv.request.joint_position.position = [updatedJointPose['joint1'], updatedJointPose['joint2'], updatedJointPose['joint3'], updatedJointPose['joint4'], updatedJointPose['joint5'], updatedJointPose['joint6']]
    srv.request.path_time = .5
    move_joint  = rospy.ServiceProxy('/open_manipulator_pro/goal_joint_space_path', SetJointPosition)
    _responseSetJointPose = move_joint(srv)
  except (rospy.ServiceException, rospy.ROSException) as e:
    rospy.logerr("Service call failed: %s" % (e,))
    #print("Service call failed")
    exit(-1)
  return("manipulator joint update complete")

@app.route('/setGripperPosition', methods=['POST'])
def setGripperPosition():
  rospy.wait_for_service('/frystation/gripper_set_position')
  try:
    updatedGripperPosition = request.get_json()
    gripper_position = [updatedGripperPosition['gripper']]
    move_gripper  = rospy.ServiceProxy('/frystation/gripper_set_position', Int32)
    _responseSetJointPose = move_gripper(gripper_position)
  except (rospy.ServiceException, rospy.ROSException) as e:
    rospy.logerr("Service call failed: %s" % (e,))
    #print("Service call failed")
    exit(-1)
  return("gripper position update complete")

if __name__ == '__main__':
    		 
  app.run(host='0.0.0.0', debug=True) #host is required to allow this to be served to an external computer



