#!/usr/bin/env python

import rospy # pylint: disable=import-error
import time
from open_manipulator_msgs.srv import SetJointPosition # pylint: disable=import-error
from open_manipulator_msgs.srv import SetActuatorState # pylint: disable=import-error
from open_manipulator_msgs.msg import JointPosition # pylint: disable=import-error

######################### MANIPULATOR POSITIONS ###########################
TEST1 = [0.0, -1.4191, 1.4135, 0.0, 1.2842, 0.9280]
MANIPULATOR_HOME = [0.0,-0.7853,0.3926,0.0, 0.3926, 0.0]
DOOR_OPEN_APPROACH = [-1.4951, -1.5587, 2.6277, 0.0262, 2.9459, 0.018]
DOOR_OPEN_POSITION_1 = [-1.4951, -1.2087, 2.6277, 0.0262, 2.9459, 0.0018]
GRIPPER_OPEN = 700
GRIPPER_CLOSED = 0
GRIPPER_CUP_GRASP = []
###########################################################################
def manipulator_enable(enabled):
	print("starting manipulator_enable")
	rospy.wait_for_service('/open_manipulator_pro/set_actuator_state')
	try:
		set_actuator_state = enabled
		enable_manipulator  = rospy.ServiceProxy('/open_manipulator_pro/set_actuator_state', SetActuatorState)
		_response_enable_manipulator = enable_manipulator(set_actuator_state)
	except (rospy.ServiceException, rospy.ROSException) as e:
		rospy.logerr("Service call failed: %s" % (e,))
		print("manipulator_enable Service call failed")
		exit(-1)
	return("manipulator enable update complete")

def manipulator_move(joints, speed):
	print("starting manipulator_move")
	rospy.wait_for_service('/open_manipulator_pro/goal_joint_space_path')
	try:
		planning_group = "manipulatorGroup"
		joint_name = ["joint1", "joint2", "joint3", "joint4", "joint5", "joint6"]
		joint_position = [joints[0], joints[1], joints[2], joints[3], joints[4], joints[5]]
		print(joint_position)
		msgPosition = JointPosition()
		msgPosition.joint_name = joint_name 
		msgPosition.position = joint_position
		path_time = speed
		move_joint  = rospy.ServiceProxy('/open_manipulator_pro/goal_joint_space_path', SetJointPosition)
		_responseSetJointPose = move_joint(planning_group, msgPosition, path_time)
	except (rospy.ServiceException, rospy.ROSException) as e:
		rospy.logerr("Service call failed: %s" % (e,))
		print("Call to /open_manipulator_pro/goal_joint_space_path failed")
		exit(-1)
	return("manipulator joint update complete")

def setGripperPosition(gripperPosition):
	print("starting set gripper position")
	rospy.wait_for_service('/open_manipulator_pro/goal_tool_control')
	try:
		planning_group = "gripperGroup"
		msgGripperPosition = JointPosition()
		joint_name = ["gripper"]
		joint_position = [float(gripperPosition/649.69)]
		msgGripperPosition.joint_name = joint_name 
		msgGripperPosition.position = joint_position
		path_time = 0.5
		move_gripper  = rospy.ServiceProxy('/open_manipulator_pro/goal_tool_control', SetJointPosition)
		_responseSetGripperPose = move_gripper(planning_group, msgGripperPosition, path_time)
	except (rospy.ServiceException, rospy.ROSException) as e:
		rospy.logerr("Service call failed: %s" % (e,))
		print("gripper position Service call failed")
		exit(-1)
	return("gripper position update complete")

def make_Fries():
	print("starting make_Fries")
	################################################################
	######################### Make Fries ###########################
	################################################################
	
	#################### Open Door ####################
	
	#enable joints
	manipulator_enable(True)
	time.sleep(1) 

	#this returns an error
	manipulator_move(MANIPULATOR_HOME,1)
	time.sleep(1) 

	#open gripper
	setGripperPosition(GRIPPER_OPEN)
	time.sleep(1) 

	#move the manipulator to the test position 
	manipulator_move(DOOR_OPEN_APPROACH ,3)
	time.sleep(5) 

	#move the manipulator to the home position 
	manipulator_move(DOOR_OPEN_POSITION_1,1)
	time.sleep(5) 

	#move the manipulator to the test position 
	manipulator_move(DOOR_OPEN_APPROACH,1)
	time.sleep(5) 

	#move back to the home position
	manipulator_move(MANIPULATOR_HOME,3)
	time.sleep(1) 

	#disable joints
	manipulator_enable(False)
	#time.sleep(1) 

if __name__=='__main__':
	try:
		
		#create the ROS node for the application	
		rospy.init_node('frymaker')

		#run the main application
		make_Fries()
		
	except rospy.ROSInterruptException:
		pass


