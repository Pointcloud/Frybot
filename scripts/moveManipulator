#!/usr/bin/env python

import time
import rospy # pylint: disable=import-error
from std_msgs.msg import String # pylint: disable=import-error
from std_msgs.msg import Int32 # pylint: disable=import-error
from frystation.msg import JointPose # pylint: disable=import-error
from frystation.srv import GetJointPose # pylint: disable=import-error
from frystation.msg import SyncWriteItem # pylint: disable=import-error
from robotis_controller_msgs.msg import StatusMsg # pylint: disable=import-error

def manipulator_status_callback(data):
	global MANIPULATOR_MOVING
	if data.status_msg == "End Trajectory":
		MANIPULATOR_MOVING = False

def handle_manipulator_move(jointPose):
	print("Starting manipulator joint move")
	global MANIPULATOR_MOVING
	MANIPULATOR_MOVING = True
	pubManipulator.publish(jointPose)
	mustend = time.time() + 10
	while time.time() < mustend:
		if not MANIPULATOR_MOVING: break
		time.sleep(.1)
	return "Move Completed"

def move_manipulator_server():
	rospy.init_node('manipulator_set_joint_values')
	s = rospy.Service('manipulator_set_joint_values', GetJointPose, handle_manipulator_move)
	print("Ready to handle manipulator Move requests")
	rospy.spin()

if __name__ == "__main__":
	#create global variable to identify whether the manipulator is currently moving
	MANIPULATOR_MOVING = False

	#setup publisher to send manipulator joint commands
	pubManipulator = rospy.Publisher('/robotis/base/joint_pose_msg',JointPose, queue_size=1)

	#setup a subscriber to recieve notifications about manipulator status, allow 2 seconds for subscriber to register
	rospy.Subscriber("/robotis/status", StatusMsg, manipulator_status_callback)
	time.sleep(1) 
	move_manipulator_server()